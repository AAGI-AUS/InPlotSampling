[{"path":"https://biometryhub.github.io/RankedSetSampling/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 University Adelaide Biometry Hub Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/Readme.html","id":null,"dir":"","previous_headings":"","what":"RankedSetSampling","title":"RankedSetSampling","text":"RankedSetSampling package provides way researchers easily implement Ranked Set Sampling practice.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/Readme.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"RankedSetSampling","text":"JPS Sampling RSS Sampling Installation JPS Sample Estimator SBS PPS Sample Estimator Citing package Related Reference","code":""},{"path":[]},{"path":"https://biometryhub.github.io/RankedSetSampling/Readme.html","id":"jps-sampling","dir":"","previous_headings":"Sampling Methods","what":"JPS Sampling","title":"RankedSetSampling","text":"Sampling made following diagram . JPS sampling diagram","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/Readme.html","id":"rss-sampling","dir":"","previous_headings":"Sampling Methods","what":"RSS Sampling","title":"RankedSetSampling","text":"Sampling made following diagram . RSS sampling diagram","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/Readme.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RankedSetSampling","text":"Use following code install package:","code":"if(!require(\"remotes\")) install.packages(\"remotes\")  remotes::install_github(\"biometryhub/RankedSetSampling\", upgrade = FALSE)"},{"path":"https://biometryhub.github.io/RankedSetSampling/Readme.html","id":"example-of-use","dir":"","previous_headings":"","what":"Example of use","title":"RankedSetSampling","text":"package includes example data files, can seen population emergence_ranks. installing package , package can used following example:","code":"# load the package library(RankedSetSampling)  # Compute the JPS estimators  JPS.Estimates <- OneSample(data = emergence_ranks, set_size = 4,                            method = \"JPS\", confidence = 0.95,                             replace = TRUE, model = 0,                             pop_size = nrow(population))  print(JPS.Estimates)"},{"path":"https://biometryhub.github.io/RankedSetSampling/Readme.html","id":"citing-this-package","dir":"","previous_headings":"","what":"Citing this package","title":"RankedSetSampling","text":"package can cited using citation(\"RankedSetSampling\") generates","code":"To cite package 'RankedSetSampling' in publications use:    Ozturk O, Rogers S, Kravchuk O, Kasprzak P (2021).   _RankedSetSampling: Easing the Application of Ranked Set Sampling in   Practice_. R package version 0.1.0,   <https://biometryhub.github.io/RankedSetSampling/>.  A BibTeX entry for LaTeX users is    @Manual{,     title = {RankedSetSampling: Easing the Application of Ranked Set Sampling in Practice},     author = {Omer Ozturk and Sam Rogers and Olena Kravchuk and Peter Kasprzak},     year = {2021},     note = {R package version 0.1.0},     url = {https://biometryhub.github.io/RankedSetSampling/},   }"},{"path":[]},{"path":"https://biometryhub.github.io/RankedSetSampling/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Omer Ozturk. Author. Sam Rogers. Maintainer, author. Olena Kravchuk. Author, data contributor. Peter Kasprzak. Author.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ozturk O, Rogers S, Kravchuk O, Kasprzak P (2024). RankedSetSampling: Easing Application Ranked Set Sampling Practice. R package version 0.1.0, https://biometryhub.github.io/RankedSetSampling/.","code":"@Manual{,   title = {RankedSetSampling: Easing the Application of Ranked Set Sampling in Practice},   author = {Omer Ozturk and Sam Rogers and Olena Kravchuk and Peter Kasprzak},   year = {2024},   note = {R package version 0.1.0},   url = {https://biometryhub.github.io/RankedSetSampling/}, }"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/DELETi.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — DELETi","title":"Title — DELETi","text":"Title","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/DELETi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — DELETi","text":"","code":"DELETi(i, PASS)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/DELETi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — DELETi","text":"index PASS Values passed ","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/RankedSetSampling.html","id":null,"dir":"Reference","previous_headings":"","what":"RankedSetSampling: Easing the Application of Ranked Set Sampling in Practice — RankedSetSampling","title":"RankedSetSampling: Easing the Application of Ranked Set Sampling in Practice — RankedSetSampling","text":"RankedSetSampling package provides way researchers easily implement Ranked Set Sampling practice. Ranked Set Sampling originally described McIntyre (1952) (reprinted 2005) doi:10.1198/000313005X54180 . package takes work Omer Kravchuk (2021) https://doi.org/10.1007/s13253-021-00439-1 enables easy use methods.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/RankedSetSampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RankedSetSampling: Easing the Application of Ranked Set Sampling in Practice — RankedSetSampling","text":"Maintainer: Sam Rogers sam.rogers@adelaide.edu.au Authors: Omer Ozturk omer@stat.osu.edu (ORCID) Olena Kravchuk olena.kravchuk@adelaide.edu.au (ORCID) [data contributor] Peter Kasprzak peter.kasprzak@adelaide.edu.au","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/TRIPLEF.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the triple sum — TRIPLEF","title":"Calculate the triple sum — TRIPLEF","text":"Calculate triple sum","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/TRIPLEF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the triple sum — TRIPLEF","text":"","code":"TRIPLEF(uv, H, n)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/TRIPLEF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the triple sum — TRIPLEF","text":"H set size n sample size","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/bootstrap_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate boostrap sample on the provided population. — bootstrap_sample","title":"Generate boostrap sample on the provided population. — bootstrap_sample","text":"Generate boostrap sample provided population.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/bootstrap_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate boostrap sample on the provided population. — bootstrap_sample","text":"","code":"bootstrap_sample(pop, n, n_bootstraps)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/bootstrap_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate boostrap sample on the provided population. — bootstrap_sample","text":"pop Population data n Sample sizes (SBS sample size, PPS sample size). n_bootstraps Number bootstrap samples.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/bootstrap_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate boostrap sample on the provided population. — bootstrap_sample","text":"summary data frame estimator.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_agreement_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Agreement Weights — calculate_agreement_weights","title":"Calculate Agreement Weights — calculate_agreement_weights","text":"Calculate Agreement Weights","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_agreement_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Agreement Weights — calculate_agreement_weights","text":"","code":"calculate_agreement_weights(ranks, set_size)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_agreement_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Agreement Weights — calculate_agreement_weights","text":"ranks Ranking values set_size Set size","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_agreement_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Agreement Weights — calculate_agreement_weights","text":"vector agreement weights","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"This function computes the coefficient of variance estimator — calculate_coefficients","title":"This function computes the coefficient of variance estimator — calculate_coefficients","text":"function computes coefficient variance estimator","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function computes the coefficient of variance estimator — calculate_coefficients","text":"","code":"calculate_coefficients(H, n)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function computes the coefficient of variance estimator — calculate_coefficients","text":"H Set size raking group. n Sample size.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_first_order_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate first order inclusion probability. — calculate_first_order_prob","title":"Calculate first order inclusion probability. — calculate_first_order_prob","text":"Calculate first order inclusion probability.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_first_order_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate first order inclusion probability. — calculate_first_order_prob","text":"","code":"calculate_first_order_prob(i, size_measurement, n, total_size)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_first_order_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate first order inclusion probability. — calculate_first_order_prob","text":"Index probability calculated. size_measurement Size measurements population units. n Sample sizes (SBS sample size, PPS sample size). total_size Sum size measurement.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_first_order_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate first order inclusion probability. — calculate_first_order_prob","text":"vector inclusion probabilities.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_inclusion_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inclusion probabilities. — calculate_inclusion_prob","title":"Calculate inclusion probabilities. — calculate_inclusion_prob","text":"Calculate inclusion probabilities.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_inclusion_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inclusion probabilities. — calculate_inclusion_prob","text":"","code":"calculate_inclusion_prob(   size_measurement,   n,   n_cores = getOption(\"n_cores\", 1) )"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_inclusion_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate inclusion probabilities. — calculate_inclusion_prob","text":"size_measurement Size measurements population units. n Sample sizes (SBS sample size, PPS sample size). n_cores number cores used computational tasks (specify 0 max).","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/calculate_inclusion_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate inclusion probabilities. — calculate_inclusion_prob","text":"vector inclusion probabilities.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/coombe2019.html","id":null,"dir":"Reference","previous_headings":"","what":"Coombe Vineyard Data from 2019 Season. — coombe2019","title":"Coombe Vineyard Data from 2019 Season. — coombe2019","text":"Measurements taken Coombe Research Vineyard, University Adelaide Waite Campus 2019 season.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/coombe2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coombe Vineyard Data from 2019 Season. — coombe2019","text":"","code":"coombe2019"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/coombe2019.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Coombe Vineyard Data from 2019 Season. — coombe2019","text":"data frame 352 rows 11 variables: vine_id Identifier individual vines (1-352) rootstock rootstock vine growing (8 levels) row row vineyard (10-20) panel panel vines. pair vines grouped panel (1-16) trunk_circ_18 trunk circumference vine 2018, measured cm watering height (~20 cm ground). trunk_circ_19 trunk circumference vine 2019, measured cm watering height (~20 cm ground). count_shoots Check ? non_count_shoots Check ? total_shoots Sum count_shoot non_count_shoot. pruning_weight Weight material removed pruning Kg. Check ? cordon_length length cordon cm","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/emergence_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranks for Seed Emergence. — emergence_ranks","title":"Ranks for Seed Emergence. — emergence_ranks","text":"Contains ranks given 5 rankers number seeds emerged sample 15 plots.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/emergence_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranks for Seed Emergence. — emergence_ranks","text":"","code":"emergence_ranks"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/emergence_ranks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ranks for Seed Emergence. — emergence_ranks","text":"data frame 6 variables: seed_emergence, ranker1, ranker2, ranker3, ranker4 ranker5.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_empirical_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute empirical population by imputing reponses and measured sizes using knn. — get_empirical_population","title":"Compute empirical population by imputing reponses and measured sizes using knn. — get_empirical_population","text":"Compute empirical population imputing reponses measured sizes using knn.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_empirical_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute empirical population by imputing reponses and measured sizes using knn. — get_empirical_population","text":"","code":"get_empirical_population(sample_indices, pop, y)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_empirical_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute empirical population by imputing reponses and measured sizes using knn. — get_empirical_population","text":"sample_indices Indices sample. pop Population data frame sampled 4 columns. Halton numbers X1-coordinate population unit X2-coordinate population unit Size measurement population unit y Sample response values.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_empirical_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute empirical population by imputing reponses and measured sizes using knn. — get_empirical_population","text":"summary data frame estimator.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_sbs_pps_sample_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SBS PPS sample indices. — get_sbs_pps_sample_indices","title":"Generate SBS PPS sample indices. — get_sbs_pps_sample_indices","text":"Generate SBS PPS sample indices.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_sbs_pps_sample_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SBS PPS sample indices. — get_sbs_pps_sample_indices","text":"","code":"get_sbs_pps_sample_indices(population, n, with_unique_pps = FALSE)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_sbs_pps_sample_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SBS PPS sample indices. — get_sbs_pps_sample_indices","text":"population Population data frame sampled 2 columns. Halton numbers Size measurements population units n Sample sizes (SBS sample size, PPS sample size). with_unique_pps boolean specify whether use unique indices pps sample .","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/get_sbs_pps_sample_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SBS PPS sample indices. — get_sbs_pps_sample_indices","text":"named list : sbs_pps_indices: sample indices sbs_indices: sbs sample indices pps_indices: pps sample indices sizes_wo_sbs: measured sizes without sbs sample","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/impute_w_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean of the nearest neighbors. — impute_w_knn","title":"Calculate the mean of the nearest neighbors. — impute_w_knn","text":"Calculate mean nearest neighbors.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/impute_w_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean of the nearest neighbors. — impute_w_knn","text":"","code":"impute_w_knn(knn_row, y)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/impute_w_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean of the nearest neighbors. — impute_w_knn","text":"knn_row row knn matrix composed indices distances. y Sample response values.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/impute_w_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean of the nearest neighbors. — impute_w_knn","text":"summary data frame estimator.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the estimator for JPS data — jps_estimate","title":"Computes the estimator for JPS data — jps_estimate","text":"Computes estimator JPS data","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the estimator for JPS data — jps_estimate","text":"","code":"jps_estimate(data, set_size, replace = TRUE, model_based, N, alpha)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the estimator for JPS data — jps_estimate","text":"data data use estimation. set_size Set size raking group. replace Logical (default TRUE). Sample replacement? model_based inference mode: FALSE: design based inference TRUE: model based inference using super population model N population size. alpha significance level.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the estimator for JPS data — jps_estimate","text":"data.frame point estimates provided JPS estimators along standard error confidence intervals.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the estimator and variance for each individual ranker — jps_estimate_single","title":"Computes the estimator and variance for each individual ranker — jps_estimate_single","text":"Computes estimator variance individual ranker","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the estimator and variance for each individual ranker — jps_estimate_single","text":"","code":"jps_estimate_single(   ranks,   y,   set_size,   N,   coef,   coef_del,   replace,   model_based,   K )"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the estimator and variance for each individual ranker — jps_estimate_single","text":"ranks Ranks Y. y Response measurements. set_size Set size raking group. N Finite population size. coef Coefficients used variance computation sample size n. coef_del Coefficients used variance computation -th unit deleted. replace Logical. Sample replacement? model_based inference mode: FALSE: design based inference TRUE: model based inference using super population model K Number rankers.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_estimate_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the estimator and variance for each individual ranker — jps_estimate_single","text":"data.frame point estimates provided JPS estimators along standard error confidence intervals.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate JPS sampling on the provided population. — jps_sample","title":"Generate JPS sampling on the provided population. — jps_sample","text":"Generate JPS sampling provided population.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate JPS sampling on the provided population. — jps_sample","text":"","code":"jps_sample(pop, n, H, tau, K, replace = FALSE)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate JPS sampling on the provided population. — jps_sample","text":"pop Population sampled auxiliary parameter second column. n Sample size. H Set size raking group. tau parameter controls ranking quality. K Number rankers. replace boolean specifies whether sample replacement .","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate JPS sampling on the provided population. — jps_sample","text":"matrix ranks ranker.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/jps_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate JPS sampling on the provided population. — jps_sample","text":"","code":"set.seed(112) population_size <- 600 # the number of samples to be ranked in each set H <- 3  with_replacement <- FALSE sigma <- 4 mu <- 10 n_rankers <- 3 # sample size n <- 10  rhos <- rep(0.75, n_rankers) taus <- sigma * sqrt(1 / rhos^2 - 1)  population <- qnorm((1:population_size) / (population_size + 1), mu, sigma) jps_sample(population, n, H, taus, n_rankers, with_replacement) #>               Y R1 R2 R3 #>  [1,]  6.384461  1  2  2 #>  [2,]  1.485141  1  1  1 #>  [3,] 13.640711  2  3  2 #>  [4,] 15.809136  3  3  2 #>  [5,]  6.769463  2  2  1 #>  [6,] 14.355524  3  3  3 #>  [7,] 10.729740  2  1  3 #>  [8,]  6.152453  1  1  1 #>  [9,]  8.701285  2  1  2 #> [10,] 13.323884  3  3  3 #>               Y R1 R2 R3 #>  [1,]  6.384461  1  2  2 #>  [2,]  1.485141  1  1  1 #>  [3,] 13.640711  2  3  2 #>  [4,] 15.809136  3  3  2 #>  [5,]  6.769463  2  2  1 #>  [6,] 14.355524  3  3  3 #>  [7,] 10.729740  2  1  3 #>  [8,]  6.152453  1  1  1 #>  [9,]  8.701285  2  1  2 #> [10,] 13.323884  3  3  3"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/population.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed Emergence Population. — population","title":"Seed Emergence Population. — population","text":"entire population actual estimated seed emergence.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed Emergence Population. — population","text":"","code":"population"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/population.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Seed Emergence Population. — population","text":"data frame 2640 rows 2 variables: actual_seed_emergence estimated_seed_emergence giving actual estimated number seeds emerged.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"This function provides an estimator for RSS data — rss_estimate","title":"This function provides an estimator for RSS data — rss_estimate","text":"function provides estimator RSS data","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function provides an estimator for RSS data — rss_estimate","text":"","code":"rss_estimate(data, set_size, replace, model_based, pop_size, alpha)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function provides an estimator for RSS data — rss_estimate","text":"data matrix response variable first column ranks following columns. set_size Set size ranking group. replace boolean specifies whether sample replacement . model_based inference mode: FALSE: design based inference TRUE: model based inference using super population model pop_size population size. Must provided sampling without replacement, model_based TRUE. alpha significance level.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_estimate_single.html","id":null,"dir":"Reference","previous_headings":"","what":"This function Computes RSS estimator and its variance without replacement sampling — rss_estimate_single","title":"This function Computes RSS estimator and its variance without replacement sampling — rss_estimate_single","text":"function Computes RSS estimator variance without replacement sampling","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_estimate_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function Computes RSS estimator and its variance without replacement sampling — rss_estimate_single","text":"","code":"rss_estimate_single(first_ranker_ranks, y, set_size, pop_size)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_estimate_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function Computes RSS estimator and its variance without replacement sampling — rss_estimate_single","text":"first_ranker_ranks Ranks first ranker. y Response variable. set_size Set size. pop_size Population size.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_jps_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate means from RSS or JPS sample. — rss_jps_estimate","title":"Estimate means from RSS or JPS sample. — rss_jps_estimate","text":"Estimate means RSS JPS sample.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_jps_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate means from RSS or JPS sample. — rss_jps_estimate","text":"","code":"rss_jps_estimate(   data,   set_size,   method,   confidence = 0.95,   replace = TRUE,   model_based = FALSE,   pop_size = NULL )"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_jps_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate means from RSS or JPS sample. — rss_jps_estimate","text":"data data frame JPS RSS rankings. set_size set size ranks. method method used sample: \"JPS\": Judgment-post stratified sampling \"RSS\": Ranked set sampling confidence confidence level use. replace Logical (default TRUE). Sample replacement? model_based inference mode: FALSE: design based inference TRUE: model based inference using super population model pop_size population size. Must provided sampling without replacement, model_based TRUE.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_jps_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate means from RSS or JPS sample. — rss_jps_estimate","text":"data.frame point estimates provided different types estimators along standard error confidence intervals.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_jps_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate means from RSS or JPS sample. — rss_jps_estimate","text":"","code":"# JPS estimator set.seed(112) population_size <- 600 # the number of samples to be ranked in each set H <- 3  with_replacement <- FALSE sigma <- 4 mu <- 10 n_rankers <- 3 # sample size n <- 30  rhos <- rep(0.75, n_rankers) taus <- sigma * sqrt(1 / rhos^2 - 1) population <- qnorm((1:population_size) / (population_size + 1), mu, sigma)  data <- RankedSetSampling::jps_sample(population, n, H, taus, n_rankers, with_replacement) data <- data[order(data[, 2]), ]  rss_jps_estimate(   data,   set_size = H,   method = \"JPS\",   confidence = 0.80,   replace = with_replacement,   model_based = FALSE,   pop_size = population_size ) #>          Estimator Estimate Standard Error 80% Confidence intervals #> 1       UnWeighted    9.570          0.526               8.88,10.26 #> 2      Sd.Weighted    9.595          0.569             8.849,10.341 #> 3 Aggregate Weight    9.542          0.500             8.887,10.198 #> 4     JPS Estimate    9.502          0.650             8.651,10.354 #> 5     SRS estimate    9.793          0.783             8.766,10.821 #> 6          Minimum    9.542          0.500             8.887,10.198 #>          Estimator Estimate Standard Error 80% Confidence intervals #> 1       UnWeighted    9.570          0.526               8.88,10.26 #> 2      Sd.Weighted    9.595          0.569             8.849,10.341 #> 3 Aggregate Weight    9.542          0.500             8.887,10.198 #> 4     JPS Estimate    9.502          0.650             8.651,10.354 #> 5     SRS estimate    9.793          0.783             8.766,10.821 #> 6          Minimum    9.542          0.500             8.887,10.198  # RSS estimator set.seed(112) population_size <- 600 # the number of samples to be ranked in each set H <- 3  with_replacement <- FALSE sigma <- 4 mu <- 10 n_rankers <- 3 # sample size n <- 30  population <- qnorm((1:population_size) / (population_size + 1), mu, sigma) rho <- 0.75 tau <- sigma * sqrt(1 / rho^2 - 1) x <- population + tau * rnorm(population_size, 0, 1)  population <- cbind(population, x) data <- RankedSetSampling::rss_sample(population, n, H, n_rankers, with_replacement) data <- data[order(data[, 2]), ]  rss_estimates <- rss_jps_estimate(   data,   set_size = H,   method = \"RSS\",   confidence = 0.80,   replace = with_replacement,   model_based = FALSE,   pop_size = population_size )  print(rss_estimates) #>             Estimator point.est St.error 80% Confidence Interval #> 1               RSS-1     9.153    0.766            8.148,10.158 #> 2  Aggregate Weighted     9.064    0.652             8.209,9.919 #>             Estimator point.est St.error 80% Confidence Interval #> 1               RSS-1     9.153    0.766            8.148,10.158 #> 2  Aggregate Weighted     9.064    0.652             8.209,9.919"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ranked set sampling (RSS) on the population provided. — rss_sample","title":"Generate ranked set sampling (RSS) on the population provided. — rss_sample","text":"Generate ranked set sampling (RSS) population provided.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ranked set sampling (RSS) on the population provided. — rss_sample","text":"","code":"rss_sample(pop, n, H, K, replace = FALSE)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ranked set sampling (RSS) on the population provided. — rss_sample","text":"pop Population sampled auxiliary parameter second column. n Sample size. H Set size raking group. K Number rankers. replace boolean specifies whether sample replacement .","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate ranked set sampling (RSS) on the population provided. — rss_sample","text":"matrix ranks ranker.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate ranked set sampling (RSS) on the population provided. — rss_sample","text":"","code":"set.seed(112) population_size <- 600 # the number of samples to be ranked in each set H <- 3  replace <- FALSE sigma <- 4 mu <- 10 n_rankers <- 3 # sample size n <- 9  population <- qnorm((1:population_size) / (population_size + 1), mu, sigma) rho <- 0.75 tau <- sigma * sqrt(1 / rho^2 - 1) x <- population + tau * rnorm(population_size, 0, 1)  population <- cbind(population, x) rss_sample(population, n, H, n_rankers, replace) #>            [,1] [,2] [,3] [,4] #>  [1,]  8.910625    1    3    1 #>  [2,] 12.317145    2    2    1 #>  [3,] 11.619746    3    3    2 #>  [4,]  8.307549    1    2    1 #>  [5,]  5.089992    2    2    3 #>  [6,]  7.233575    3    3    3 #>  [7,] 11.601654    1    2    2 #>  [8,]  9.134107    2    1    1 #>  [9,] 12.960431    3    3    1 #>            [,1] [,2] [,3] [,4] #>  [1,]  8.910625    1    3    1 #>  [2,] 12.317145    2    2    1 #>  [3,] 11.619746    3    3    2 #>  [4,]  8.307549    1    2    1 #>  [5,]  5.089992    2    2    3 #>  [6,]  7.233575    3    3    3 #>  [7,] 11.601654    1    2    2 #>  [8,]  9.134107    2    1    1 #>  [9,] 12.960431    3    3    1"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_w_replacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ranked set sampling (RSS) with replacement on the population provided. — rss_sample_w_replacement","title":"Generate ranked set sampling (RSS) with replacement on the population provided. — rss_sample_w_replacement","text":"Generate ranked set sampling (RSS) replacement population provided.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_w_replacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ranked set sampling (RSS) with replacement on the population provided. — rss_sample_w_replacement","text":"","code":"rss_sample_w_replacement(pop, n, H, K)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_w_replacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ranked set sampling (RSS) with replacement on the population provided. — rss_sample_w_replacement","text":"pop Population sampled auxiliary parameter second column. n Sample size. H Set size raking group. K Number rankers.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_w_replacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate ranked set sampling (RSS) with replacement on the population provided. — rss_sample_w_replacement","text":"matrix ranks ranker.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_wo_replacement.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ranked set sampling (RSS) without replacement on the population provided. — rss_sample_wo_replacement","title":"Generate ranked set sampling (RSS) without replacement on the population provided. — rss_sample_wo_replacement","text":"Generate ranked set sampling (RSS) without replacement population provided.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_wo_replacement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ranked set sampling (RSS) without replacement on the population provided. — rss_sample_wo_replacement","text":"","code":"rss_sample_wo_replacement(pop, n, H, K)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_wo_replacement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ranked set sampling (RSS) without replacement on the population provided. — rss_sample_wo_replacement","text":"pop Population sampled auxiliary parameter second column. n Sample size. H Set size raking group. K Number rankers.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/rss_sample_wo_replacement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate ranked set sampling (RSS) without replacement on the population provided. — rss_sample_wo_replacement","text":"matrix ranks ranker.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an estimator for SBS PPS sampled data. — sbs_pps_estimate","title":"Compute an estimator for SBS PPS sampled data. — sbs_pps_estimate","text":"Compute estimator SBS PPS sampled data.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an estimator for SBS PPS sampled data. — sbs_pps_estimate","text":"","code":"sbs_pps_estimate(   population,   n,   y,   sample_matrix,   n_bootstraps = 100,   alpha = 0.05,   n_cores = getOption(\"n_cores\", 1) )"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an estimator for SBS PPS sampled data. — sbs_pps_estimate","text":"population Population data frame sampled 4 columns. Halton numbers X1-coordinate population unit X2-coordinate population unit Size measurements population units n Sample sizes (SBS sample size, PPS sample size). y Sample response values. sample_matrix Sample data frame sampled 6 columns. Halton numbers X1-coordinate population unit X2-coordinate population unit Size measurement population unit Weight Inclusion probability n_bootstraps Number bootstrap samples. alpha significance level. n_cores number cores used computational tasks (specify 0 max). can also set calling options, e.g., options(n_cores = 2).","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an estimator for SBS PPS sampled data. — sbs_pps_estimate","text":"summary data frame estimator.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an estimator for SBS PPS sampled data. — sbs_pps_estimate","text":"","code":"set.seed(112)  # SBS sample size, PPS sample size sample_sizes <- c(5, 5)  n_population <- 233 k <- 0:(n_population - 1) x1 <- sample(1:13, n_population, replace = TRUE) / 13 x2 <- sample(1:8, n_population, replace = TRUE) / 8 y <- (x1 + x2) * runif(n = n_population, min = 1, max = 2) + 1 measured_sizes <- y * runif(n = n_population, min = 0, max = 4)  population <- matrix(cbind(k, x1, x2, measured_sizes), ncol = 4) sample_result <- sbs_pps_sample(population, sample_sizes)  # estimate the population mean and construct a confidence interval df_sample <- sample_result$sample sample_id <- df_sample[, 1] y_sample <- y[sample_id]  sbs_pps_estimates <- sbs_pps_estimate(   population, sample_sizes, y_sample, df_sample,   n_bootstrap = 100, alpha = 0.05 ) print(sbs_pps_estimates) #>   n1 n2 Estimate  St.error 95% Confidence intervals #> 1  5  5    2.849 0.1760682              2.451,3.247 #>   n1 n2 Estimate  St.error 95% Confidence intervals #> 1  5  5    2.849 0.1760682              2.451,3.247"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a heat map of SBS PPS sample of the provided population. — sbs_pps_heatmap","title":"Generate a heat map of SBS PPS sample of the provided population. — sbs_pps_heatmap","text":"Generate heat map SBS PPS sample provided population.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a heat map of SBS PPS sample of the provided population. — sbs_pps_heatmap","text":"","code":"sbs_pps_heatmap(pop, sbs_indices, pps_indices)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a heat map of SBS PPS sample of the provided population. — sbs_pps_heatmap","text":"pop Population data frame sampled 5 columns. Halton numbers X1-coordinate population unit X2-coordinate population unit Size measurements population units Inclusion probabilities sbs_indices Indices SBS sample. pps_indices Indices PPS sample.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a heat map of SBS PPS sample of the provided population. — sbs_pps_heatmap","text":"Heat map sample.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate probability proportional to size (PPS) and spatially balanced sampling on the population provided. — sbs_pps_sample","title":"Generate probability proportional to size (PPS) and spatially balanced sampling on the population provided. — sbs_pps_sample","text":"Generate probability proportional size (PPS) spatially balanced sampling population provided.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate probability proportional to size (PPS) and spatially balanced sampling on the population provided. — sbs_pps_sample","text":"","code":"sbs_pps_sample(population, n, n_cores = getOption(\"n_cores\", 1))"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate probability proportional to size (PPS) and spatially balanced sampling on the population provided. — sbs_pps_sample","text":"population Population data frame sampled 4 columns. Halton numbers X1-coordinate population unit X2-coordinate population unit Size measurements population units n Sample sizes (SBS sample size, PPS sample size). n_cores number cores used computational tasks (specify 0 max). can also set calling options, e.g., options(n_cores = 2).","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate probability proportional to size (PPS) and spatially balanced sampling on the population provided. — sbs_pps_sample","text":"named list : heatmap: heat map sample sample: SBS PPS sample population","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/sbs_pps_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate probability proportional to size (PPS) and spatially balanced sampling on the population provided. — sbs_pps_sample","text":"","code":"set.seed(112)  # SBS sample size, PPS sample size sample_sizes <- c(5, 5)  n_population <- 233 k <- 0:(n_population - 1) x1 <- sample(1:13, n_population, replace = TRUE) / 13 x2 <- sample(1:8, n_population, replace = TRUE) / 8 y <- (x1 + x2) * runif(n = n_population, min = 1, max = 2) + 1 measured_sizes <- y * runif(n = n_population, min = 0, max = 4)  population <- matrix(cbind(k, x1, x2, measured_sizes), ncol = 4) sample_result <- sbs_pps_sample(population, sample_sizes) print(sample_result$sample) #>    sbs_pps_indices        x1    x2       size      weight inclusion_probability #> 1               87 0.4615385 0.625  0.4665423 0.000000000            0.02319163 #> 2               88 0.1538462 0.625  1.7389902 0.000000000            0.02790409 #> 3               89 0.8461538 0.625  7.0815547 0.000000000            0.04749104 #> 4               90 0.6923077 0.750  9.5428032 0.000000000            0.05640733 #> 5               91 0.2307692 0.750  5.1375136 0.000000000            0.04039996 #> 6              173 0.1538462 0.500  6.6400168 0.005024130            0.04588620 #> 7               26 0.6153846 0.500  4.3146186 0.003264631            0.03738898 #> 8              232 0.8461538 0.750 12.0057856 0.009084108            0.06526583 #> 9              171 0.6153846 0.750  6.9029083 0.005223046            0.04684225 #> 10              29 0.8461538 0.375  4.6324720 0.003505133            0.03855377 #>    sbs_pps_indices        x1    x2       size      weight inclusion_probability #> 1               87 0.4615385 0.625  0.4665423 0.000000000            0.02319163 #> 2               88 0.1538462 0.625  1.7389902 0.000000000            0.02790409 #> 3               89 0.8461538 0.625  7.0815547 0.000000000            0.04749104 #> 4               90 0.6923077 0.750  9.5428032 0.000000000            0.05640733 #> 5               91 0.2307692 0.750  5.1375136 0.000000000            0.04039996 #> 6              173 0.1538462 0.500  6.6400168 0.005024130            0.04588620 #> 7               26 0.6153846 0.500  4.3146186 0.003264631            0.03738898 #> 8              232 0.8461538 0.750 12.0057856 0.009084108            0.06526583 #> 9              171 0.6153846 0.750  6.9029083 0.005223046            0.04684225 #> 10              29 0.8461538 0.375  4.6324720 0.003505133            0.03855377"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/single_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single boostrap sample on the provided population. — single_bootstrap","title":"Generate a single boostrap sample on the provided population. — single_bootstrap","text":"Generate single boostrap sample provided population.","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/single_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single boostrap sample on the provided population. — single_bootstrap","text":"","code":"single_bootstrap(pop, n)"},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/single_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single boostrap sample on the provided population. — single_bootstrap","text":"pop Population data n Sample sizes (SBS sample size, PPS sample size).","code":""},{"path":"https://biometryhub.github.io/RankedSetSampling/reference/single_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a single boostrap sample on the provided population. — single_bootstrap","text":"summary data frame estimator.","code":""}]
